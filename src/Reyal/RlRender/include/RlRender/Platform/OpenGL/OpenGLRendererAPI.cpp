#include "rlrpch.h"
#include "OpenGLRendererAPI.h"

#include <RlDebug/RlAssert.h>

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include "VertexShader.h"
#include "PixelShader.h"


namespace At0::Reyal
{
	OpenGLRendererAPI::OpenGLRendererAPI()
	{
	}

	void OpenGLRendererAPI::Init(void* window)
	{

	}
	
	bool OpenGLRendererAPI::IsInitialized() const
	{
		return true;
	}
	
	// Relies on glfw and glad to already be initialized
	void OpenGLRendererAPI::RenderTestTriangle()
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Vertex Shader ///////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string vertexSrc = R"(
#version 330 core
layout (location = 0) in vec3 aPos;

void main()
{
    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
}
		)";
		Ref<VertexShader> vertexShader = VertexShader::Create("VertexShader-v", vertexSrc);


		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Pixel Shader ////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string pixelSrc = R"(
#version 330 core
out vec4 FragColor;

void main()
{
    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);
} 
		)";
		Ref<PixelShader> pixelShader = PixelShader::Create("PixelShader-p", pixelSrc);


		glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Vertices ////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		float vertices[] = {
			-0.5f, -0.5f, 0.0f,
			 0.5f, -0.5f, 0.0f,
			 0.0f,  0.5f, 0.0f
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Vertex Buffer ///////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		uint32_t VBO;
		glGenBuffers(1, &VBO);
		glBindBuffer(GL_ARRAY_BUFFER, VBO);
		glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Vertex Array ////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		unsigned int VAO;
		glGenVertexArrays(1, &VAO);
		glBindVertexArray(VAO);
		glBindBuffer(GL_ARRAY_BUFFER, VBO);
		glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);


		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Link Vertex Attributes //////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
		glEnableVertexAttribArray(0);

		vertexShader->Bind();
		pixelShader->Bind();
		glBindVertexArray(VAO);

		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Draw Call ///////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		glDrawArrays(GL_TRIANGLES, 0, 3);
	}
	
	void OpenGLRendererAPI::EndDraw()
	{

	}
}


