#include "rlrpch.h"
#include "OpenGLRendererAPI.h"

#include <RlDebug/RlAssert.h>

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include "VertexShader.h"
#include "PixelShader.h"


namespace At0::Reyal
{
	OpenGLRendererAPI::OpenGLRendererAPI()
	{
	}

	void OpenGLRendererAPI::Init(void* window)
	{

	}
	
	bool OpenGLRendererAPI::IsInitialized() const
	{
		return true;
	}
	
	// Relies on glfw and glad to already be initialized
	void OpenGLRendererAPI::RenderTestTriangle()
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Vertices ////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		float vertices[6] = {
			-0.5f, -0.5f,
			 0.0f,  0.5f,
			 0.5f, -0.5f
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Vertex Buffer ///////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		uint32_t VBO;
		glGenBuffers(1, &VBO);
		glBindBuffer(GL_ARRAY_BUFFER, VBO);
		glBufferData(GL_ARRAY_BUFFER, 6 * sizeof(float), vertices, GL_STATIC_DRAW);


		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Link Vertex Attributes //////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		glEnableVertexAttribArray(0);
		glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0);


		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Vertex Shader ///////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string vertexSrc = R"(
#version 330 core

layout(location = 0) in vec4 position;

void main()
{
	gl_Position = position;
};
		)";
		Ref<VertexShader> pVertexShader = VertexShader::Create("VertexShader", vertexSrc);
		pVertexShader->Bind();

		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Pixel Shader ////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string pixelSrc = R"(
#version 330 core

layout(location = 0) out vec4 color;

void main()
{
	color = vec4(1.0, 0.0, 0.0, 1.0);
};
		)";
		Ref<PixelShader> pPixelShader = PixelShader::Create("PixelShader", pixelSrc);
		pPixelShader->Bind();


		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////// Draw Call ///////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		glDrawArrays(GL_TRIANGLES, 0, 3);
	}
	
	void OpenGLRendererAPI::EndDraw()
	{

	}
}


